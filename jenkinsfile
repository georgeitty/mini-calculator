pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo "current branch -> $env.GIT_BRANCH"
                echo 'Building..'
                sh 'chmod +x calc_test.py'
                sh 'chmod +x calc.py'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                sh 'python3 --version'
                sh 'python3 -m unittest calc_test.py'
            }
            post { 
                success { 
                    script {
                        env.COMMIT_STATE = "success" 
                    }
                }
                failure {
                    script {
                        env.COMMIT_STATE = "failure" 
                    }
                }
                cleanup {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'github-api-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                        sh """
                        curl "https://api.GitHub.com/repos/georgeitty/mini-calculator/statuses/$GIT_COMMIT?access_token=$PASSWORD" \
                        -H "Content-Type: application/json" \
                        -X POST \
                        -d "{\\"state\\": \\"$env.COMMIT_STATE\\",\\"context\\": \\"continuous-integration/jenkins\\", \\"description\\": \\"Jenkins\\", \\"target_url\\": \\"http://159.65.178.239:8080/job/calculator_declarative_pipeline/$BUILD_NUMBER/console\\"}"
                        """
                    }
                }
            }
        }
        stage('MasterMerge') {
            steps {
                script { 
                    echo "current branch -> $env.GIT_BRANCH"
                    if (env.GIT_BRANCH != 'origin/master') {
                        echo "current branch -> $env.GIT_BRANCH"
                        sh 'git checkout master'
                        sh "git merge $env.GIT_BRANCH --squash"
                        sh "git commit -am \"merged $env.GIT_BRANCH with master\""
                    } else {
                        echo 'master branch nothing to merge'
                    }
                }
            }
        }
        /*
        stage('Deploy') {
            steps {
                echo 'Deploying....'
                echo "started docker stage..."
                script {
                    String imageName = "georgeitty/calc-app-image$BUILD_NUMBER"
                    docker.build(imageName, '--no-cache=true .')
                }
                //sh 'docker build -t "georgeitty/calc-app-image$BUILD_NUMBER" .'
                withDockerRegistry([ credentialsId: "7078ee07-8329-4d1e-8e29-30eb0d9da770", url: "" ]){
                    script {
                        String imageName = "georgeitty/calc-app-image$BUILD_NUMBER"
                        docker.image(imageName).push()
                    }
                }
            }
        }
        */
    }
}